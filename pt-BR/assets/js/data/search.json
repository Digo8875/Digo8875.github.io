[
  
  {
    "title": "Tutorial - Criando um blog com Jekyll Chirpy",
    "url": "/posts/tutorial-jekyll-chirpy-blog/",
    "categories": "Blog, Tutorial",
    "tags": "tutorial, blog, jekyll, chirpy",
    "date": "2025-01-01 13:00:00 -0300",
    





    
    "snippet": "Introdução Esse artigo é um tutorial que exemplifica uma abordagem para criação de um blog e geração de seus arquivos para deploy. Para o exemplo utilizaremos o GitHub. A ideia da implementação é t...",
    "content": "Introdução Esse artigo é um tutorial que exemplifica uma abordagem para criação de um blog e geração de seus arquivos para deploy. Para o exemplo utilizaremos o GitHub. A ideia da implementação é também permitir que, caso deseje, seu código possa ficar em um repositório privado e só seja construída a aplicação para exibição do que você realmente deseja exibir.A Quem é Indicado?  Desenvolvedores que querem ter um blog aberto gratuitamente ao público  Desenvolvedores que não possuem conhecimento de script do githubpagesO Problema Implementar um blog que permita multilinguagem, utilizando Jekyll e tema Chirpy, sem saber implementação de script do Github Pages e com deploy manual.Requisitos  Ferramentas          VSCode      Git      NodeJS      Ruby      Jekyll        O que devo saber?          Conhecimento em VSCode ou uma IDE de sua preferência;      Conhecimento em Github;      Conhecimento para editar seus posts - Markdown, HTML, CSS;      Mão na massa!1 - Criando nosso repositórioCrie um repositório para nosso código no GitHub. No meu caso utilizei jekyll-chirpy-multilang-blog.Baixe o repo em uma pasta de sua preferência para podermos iniciar o desenvolvimento do blog.2 - Baixando o Jekyll com tema do ChirpyAqui iremos baixar o Chirpy, que é um tema e implementação de blog com Jekyll.Iremos baixá-lo manualmente e ajustar para nosso repo, para podermos modificá-lo conforme desejado e torná-lo multilinguagem.Para o tutorial iremos utilizar o Chirpy - 7.2.4.Caso deseje outra versão, navegue pelas TAGs e escolha a de sua preferência.Obs: Baixe o Chirpy do repo de desenvolvimento e não do repo ‘starter’, pois permitirá alterações conforme desejar para seu blog;Extraia o zip da versão baixada;Agora temos uma pasta jekyll-theme-chirpy-7.2.4, entre nela;Remova a pasta .github, não iremos utilizar as automações de scripts;Transfira todos arquivos da pasta jekyll-theme-chirpy-7.2.4 para nossa pasta do repo de desenvolvimento jekyll-chirpy-multilang-blog;Abra a pasta jekyll-chirpy-multilang-blog no VSCode para começarmos a trabalhar;Ok, até aqui temos os arquivos iniciais, conforme a branch: 1-chirpy-7.2.43 - Ajustando a aplicaçãoAbra o arquivo /Gemfile e adicione a dependência do Polygot:gem \"jekyll-polyglot\"Abra o arquivo /_config.yml, adicione o Polygot e a configuração:plugins:  - jekyll-polyglot# polyglot configurationlanguages: [\"en\", \"pt-BR\"]default_lang: \"en\"exclude_from_localization: [\"javascript\", \"images\", \"assets\", \"public\"]parallel_localization: falseNote que estamos criando a aplicação apenas para os idiomas en e pt-BR, tendo como padrão o idioma en. Ajuste conforme desejar.Abra o terminal na pasta da aplicação (/jekyll-chirpy-multilang-blog) e instale as dependências:bundle installPara não termos problema na hora de compilar o projeto, iremos realizar ajustes nas configurações. Será necessário comentar/remover algumas linhas do arquivo /_config.yml/_config.yml atual:exclude:  - \"*.gem\"  - \"*.gemspec\"  - docs  - tools  - README.md  - LICENSE  - purgecss.js  - rollup.config.js  - \"package*.json\"/_config.yml ajustado:exclude:  # - \"*.gem\"  # - \"*.gemspec\"  - docs  - tools  - README.md  - LICENSE  - purgecss.js  # - rollup.config.js  # - \"package*.json\"Apenas para testar o build, execute no terminal: bundle exec jekyll build;O projeto deve ter sido compilado sem gerar problemas no terminal;Vamos testar se nossa aplicação está rodando corretamente até o momento?Atente-se que ela ainda não terá a troca de idiomas!Execute no terminal os comandos:npm installnpm run buildbundle installbundle updatebundle exec jekyll buildbundle exec jekyll sCom os comandos iremos:Instalar dependências do Node;Buildar as dependências do Node e arquivos JS da aplicação;Instalar dependências do bundle;Atualizar dependências do bundle;Buildar o Jekyll e arquivos da aplicação;Rodar nosso servidor local do Jekyll;Com o servidor do Jekyll funcionando, acesse a aplicação em localhost:4000. Devemos ter tudo funcionando:Exemplo inicial do blog4 - Ajustando a seleção de idiomaAgora iremos fazer nossa seleção de idiomas no menu lateral e suas configurações para a aplicação.Primeiro, troque a variável de língua utilizada do Jekyll para a do Polyglot:  Utilize o “search and replace” do VSCode para alterar a variável em TODOS OS ARQUIVOS da aplicação;  Altere a variável de site.lang para site.active_lang;Substituição de variáveis pelo VSCodeBaixe as imagens de bandeiras de sua preferência para utilizar na aplicação.Utilizei estas bandeiras, específicamente as da pasta ‘4x3’ por serem retangulares.As imagens das bandeiras deverão ficar na pasta da aplicação: /assets/img/flags;Atente-se que as minhas são em svg, então se você utilizar outro formato de imagem deverá trocar depois na utilização delas pela aplicação;Portanto, utilizarei como exemplo:  /assets/img/flags/us.svg  /assets/img/flags/br.svgCom nossas imagens ajustadas, podemos criar nosso seletor de idiomas no menu lateral do blog. Vamos lá!No arquivo /_includes/sidebar.html, iremos criar o menu de idiomas no html. Note que adicionei dentro da div &lt;div class=\"sidebar-bottom d-flex flex-wrap align-items-center w-100\"&gt;, logo no início para ficar antes dos links sociais, pois é onde desejo na minha aplicação. Fique livre para estilizar e adicionar como desejar.Código da alteração do menu de idiomas:&lt;div class=\"sidebar-bottom d-flex flex-wrap align-items-center w-100\"&gt;  &lt;!-- jekyll-polyglot will process ferh= into href= through the static_href liquid block tag without relativizing the url; useful for making language navigation switchers  --&gt;  &lt;div class=\"lang-div d-flex flex-column w-100\"&gt;    &lt;p style=\"font-weight: bold;\" id=\"language\"&gt;      {{ site.data.locales[site.active_lang].lang_config.languages }}    &lt;/p&gt;    {% for tongue in site.languages %}      &lt;p class=\"lang-name-box\"&gt;        {% if tongue == site.active_lang %}          &lt;a class=\"lang-name\" id=\"current-lang\" style=\"font-weight: bold;\"&gt;            &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;            &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;          &lt;/a&gt;        {% else %}          {% if page.lang-exclusive %}            {% assign is_lang_exclusive = false %}            {% for lang in page.lang-exclusive %}              {% if tongue == lang %}                {% assign is_lang_exclusive = true %}                &lt;span&gt;This language is in the lang_ex list&lt;/span&gt;              {% endif %}            {% endfor %}            {% if is_lang_exclusive == false %}              &lt;a class=\"lang-name disabled-lang\"&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;            {% else %}              &lt;a class=\"lang-name\" {% static_href %}href=\"{% if tongue == site.default_lang %}{{site.baseurl}}{{page.url}}{% else %}{{site.baseurl}}/{{ tongue }}{{page.url}}{% endif %}\"{% endstatic_href %}&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;            {% endif %}          {% else %}              &lt;a class=\"lang-name\" {% static_href %}href=\"{% if tongue == site.default_lang %}{{site.baseurl}}{{page.url}}{% else %}{{site.baseurl}}/{{ tongue }}{{page.url}}{% endif %}\"{% endstatic_href %}&gt;                &lt;img class=\"lang-flag\" src=\"/assets/img/flags/{{ site.data.locales[tongue].lang_config.flag }}.svg\"&gt;                &lt;span&gt; {{ site.data.locales[site.active_lang].site_languages[tongue] }} &lt;/span&gt;              &lt;/a&gt;          {% endif %}        {% endif %}      &lt;/p&gt;    {% endfor %}  &lt;/div&gt;  &lt;!-- Existing sidebar-bottom code below --&gt;  &lt;!-- (...) --&gt;&lt;/div&gt;Temos nosso visual montado, mas você percebeu que possuímos diversas variáveis sendo utilizadas no código html. Então agora precisamos configurar essas variáveis para exibição da tradução.No arquivo /_data/locales/en.yml, adicione as traduções e configurações correspondentes ao idioma:# The languages of sidebarsite_languages:  en: English  pt-BR: Portuguese# The lang configlang_config:  languages: Languages  flag: usNo arquivo /_data/locales/pt-BR.yml, adicione as traduções e configurações correspondentes ao idioma:# The languages of sidebarsite_languages:  en: Inglês  pt-BR: Português# The lang configlang_config:  languages: Idiomas  flag: brVocê deverá fazer isso para cada idioma que adicionou nas suas configurações do arquivo /_config.yml, lembra?# ...# polyglot configurationlanguages: [\"en\", \"pt-BR\"]# ...Agora temos que ajustar nossa estilização no CSS. Altere o arquivo /sass/layout/sidebar.scss, adicionando o código dentro do .sidebar-bottom:.sidebar-bottom {  // (...)  // Existing sidebar-bottom code above  .lang-name-box {    font-family: 'NotoColorEmojiLimited', -apple-system, BlinkMacSystemFont,      'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji',      'Segoe UI Emoji', 'Segoe UI Symbol';    margin: 0.1rem;    margin-bottom: 0.15rem;    .lang-name {      padding: 1.2rem;      border: 1px solid transparent;      border-radius: 0.75rem;      width: 90%;      text-align: left;      font-size: 0.9rem;      margin-bottom: 0.1rem;      justify-content: left;      color: var(--sidebar-active-color);      background-color: var(--sidebar-bg);      opacity: 0.8;      &amp;:hover {        background-color: var(--sidebar-hover-bg);      }    }    .lang-flag {      width: 15%;      margin-right: 0.75rem;      border-radius: 0.15rem;      box-shadow: 2px 1.5px 5px #000000AA;    }    span {      font-size: 90%;      letter-spacing: 0.2px;    }    .disabled-lang {      background-color: var(--sidebar-disabled-color);      color: #ff0000;      &amp;:hover {        background-color: #ffe3e5;      }    }    #current-lang {      background-color: var(--sidebar-hover-bg);      opacity: 1;    }  }  .lang-div {    margin-bottom: 1.2rem;    padding: 0;  }  #language {    font-size: 1.1rem;    margin-bottom: 0.3rem;  }} /* .sidebar-bottom */Tudo ajustado, vamos testar nossa aplicação: bundle exec jekyll sNesse ponto nossa aplicação deverá se encontrar com o menu lateral dessa maneira:Exemplo do blog com seleção de idioma no menu lateralAssim, ao trocar de idioma você perceberá a troca de algumas informações do site.Ok, até aqui temos a aplicação conforme a branch: 2-sidebar-lang-menu5 - Ajustando a página ‘About’Essa página é um pouco diferente em sua implementação, então iremos adaptar para nossa tradução te idiomas.A ideia será filtrarmos o idioma e exibir a página correta, que poderá ser markdown ou html conforme configurarmos.Primeiro, vamos alterar o arquivo /_tabs/about.md e deixá-lo assim:---icon: fas fa-info-circleorder: 4---&lt;!-- The file type (.md or .html) of about-content --&gt;{% assign file_type = '.md' %}{% assign path_prefix = '' %}{% assign file_name = 'about-content' %}{% if site.active_lang == site.default_lang %}  {% assign path_prefix = '' %}{% else %}  {% assign path_prefix = '' | append: site.active_lang | append: '/' %}{% endif %}{% assign about_content_path = '' | append: path_prefix | append: file_name | append: file_type %}{% include {{ about_content_path }} %}Dessa maneira, conseguimos configurar qual o tipo de arquivo desejamos utilizar para o conteúdo da página about (.md ou .html) e nossa lógica fará a mágica para decidir qual apresentar ao usuário, tanto pelo tipo do arquivo quanto pelo idioma.Agora precisamos criar nossos arquivos de conteúdo da página about. Utilizaremos a abordagem de deixar os arquivos do idioma en como padrão e os arquivos pr-BR em sua respectiva pasta, sempre com a mesma nomenclatura.Dessa maneira, teremos que criar os arquivos na pasta /_includes assim:  /_includes          /pt-BR                  about-content.html          about-content.md                    about-content.html      about-content.md      Confira o conteúdo de cada arquivo criado:{% include lang.html %}&lt;div id=\"about\" class=\"pl-xl-3\"&gt;  &lt;div&gt;    About content in HTML  &lt;/div&gt;  &lt;div&gt;    Add Html syntax content to file &lt;strong&gt;_includes/about-content.html&lt;/strong&gt; and it will show up on this page.  &lt;/div&gt;  &lt;div&gt;    en  &lt;/div&gt;&lt;/div&gt;About content in MARKDOWN&gt; Add Markdown syntax content to file `_includes/about-content.md`{: .filepath } and it will show up on this page.{: .prompt-tip }en{% include lang.html %}&lt;div id=\"about\" class=\"pl-xl-3\"&gt;  &lt;div&gt;    About content in HTML  &lt;/div&gt;  &lt;div&gt;    Add Html syntax content to file &lt;strong&gt;_includes/pt-BR/about-content.html&lt;/strong&gt; and it will show up on this page.  &lt;/div&gt;  &lt;div&gt;    pt-BR  &lt;/div&gt;&lt;/div&gt;About content in MARKDOWN&gt; Add Markdown syntax content to file `_includes/pt-BR/about-content.md`{: .filepath } and it will show up on this page.{: .prompt-tip }pt-BROk, até aqui temos a aplicação conforme a branch: 3-refactor-about-page-logic6 - Trabalhando com posts em multilinguasNossos posts sempre ficarão na pasta /_post.Já que escolhemos o idioma en como padrão, os arquivos referentes a ele sempre estarão nas pastas raízes de cada módulo da aplicação.Assim, os outros posts de traduções deverão seguir a padronização e estarem em suas respectivas pastas.Vamos fazer um exemplo com o getting-started do próprio Chirpy.No arquivo /_post/2019-08-09-getting-started.md, adicione a configuração de lang (pode ser após o título), ficando com as configurações assim:---title: Getting Startedlang: endescription: &gt;-  Get started with Chirpy basics in this comprehensive overview.  You will learn how to install, configure, and use your first Chirpy-based website, as well as deploy it to a web server.author: cotesdate: 2019-08-09 20:55:00 +0800categories: [Blogging, Tutorial]tags: [getting started]pin: truemedia_subpath: '/posts/20180809'---Dessa maneira nosso post está configurado para o idioma en.Agora vamos fazer nossa tradução pt-BR. Criamos a pasta /post/pt-BR, que irá armazenar todos nossos posts no idioma.Copie o arquivo correspondente ao idioma en para a pasta pt-BR e configure a lang do novo post. Também vamos alterar o conteúdo do post para sabermos que tem algo mudando conforme selecionamos os idiomas.Então nosso post getting-started em pt-BR ficará assim:---title: Getting Startedlang: pt-BRdescription: &gt;-  Aqui temos nossa descrição em pt-BRauthor: cotesdate: 2019-08-09 20:55:00 +0800categories: [Blogging, Tutorial]tags: [getting started]pin: truemedia_subpath: '/posts/20180809'---## Creating a Site RepositoryNosso POST em pt-BR !!!Vamos testar. Lembrando de rodar a aplicação com bundle exec jekyll s e acessando em localhost:4000.Acesse a página HOME e já teremos a exibição dos posts getting-started em ambos idiomas.Acesse o post do getting-started e troque de idioma.Agora o conteúdo do nosso post já está alterando de acordo com nossa seleção de idioma.7 - Filtrando a exibição dos posts na página ‘Home’ por idiomaOk, temos até o momento uma aplicação que permite tradução das páginas about e posts. Porém, na página home ainda temos a exibição de todos posts independente do idioma selecionado.Aqui temos 2 opções:  Iremos trabalhar SEMPRE criando cada post em TODOS OS IDIOMAS;  Iremos possuir post que não possuem tradução para todos idiomas e precisaremos filtrar a exibição;Se seguir na primeira opção, não precisa fazer mais nada. Apenas delete tudo da pasta /_post e inicie sua escrita, sempre seguindo a padronização de pastas dos posts e idiomas.Como quero um pouco mais de diversão, vamos seguir com a segunda opção.Vamos ajustar a lógica no arquivo /_layouts/home.html:Adicione o código antes da listagem dos posts na página home, especificamente antes da div &lt;div id=\"post-list\" class=\"flex-grow-1 px-xl-1\"&gt;&lt;!-- Filter the posts by ACTIVE LANGUAGE --&gt;{% assign filtered_posts = '' | split: '' %}{% for post in posts %}  {% if post.lang == site.active_lang %}    {% assign filtered_posts = filtered_posts | push: post %}  {% elsif post.lang == null and site.active_lang == site.default_lang %}    {% assign filtered_posts = filtered_posts | push: post %}  {% endif %}{% endfor %}{% assign posts = filtered_posts %}A ideia é que como o chirpy já faz a listagem de TODOS POSTS da aplicação, verificando quais são fixados ou não, nós não iremos mudar toda sua lógica. Assim, vamos apenas pegar essa lista do Chirpy e filtrar novamente com base no nosso idioma selecionado.Para essa filtragem é checado aquela configuração que colocamos no post getting-started chamada de lang.Também lembramos que temos nosso idioma padrão, então todos posts que NÃO TIVEREM a configuração da lang serão colocados na listagem do idioma padrão.Agora testando nossa aplicação novamente, na página HOME, conforme selecionamos o idioma temos a exibição dos posts correspondentes.Ok, até aqui temos a aplicação conforme a branch: 4-home-filter-posts-by-language8 - Ajustando nosso diretório de imagensAgora vamos para nossas imagens e assets.As imagens de base são utilizadas do CDN do Chirpy, então para utilizar nossas próprias imagens nos posts e site devemos ajustar para nossos arquivos locais da aplicação. Podemos também configurar um link para nosso CDN externo ou nosso próprio domínio da aplicação, porém irem fazer com arquivos nas pastas da própria aplicação.Note que em localhost funciona normalmente e conseguimos também utilizar links de imagens do nosso assets sem problema, isso devido ao nosso comando bundle exec jekyll s criar um servidor e configurar automaticamente nosso domínio como localhost:4000. Porém, quando subirmos para o GitHub irá dar problema pois o build da aplicação não conterá o domínio do localhost.Como iremos retirar o CDN do Chirpy das configurações, as imagens da aplicação irão ficar com problema de exibição até configurarmos corretamente.Para os posts eu utilizaria a ideia padronizada, por exemplo: **/assets/img/posts/** e assim manteria o padrão de idiomas, com o **en** na raíz e cada imagem que fosse necessária traduzir nas respectivas pastas de idiomas.  Para as imagens que utilizar na aplicação como um todo, utilizaria a pasta: **/assets/img/site**.Assim, vamos começar nossas mudanças. Crie as pastas:  /assets          /img                  /posts          /site                    Vamos ajustar nosso avatar. Copie alguma imagem e salve na pasta /assets/img/site.Eu fiz com a imagem do Chirpy e com o nome padrão avatar.png, para ser possível trocar depois. Utilizei a imagem /assets/img/favicons/android-chrome-512x512.png e salvei como /assets/img/site/avatar.pngAgora vamos ajustar as configurações em /_config.yml:# The CDN endpoint for media resources.# Notice that once it is assigned, the CDN url# will be added to all media resources (site avatar, posts' images, audio and video files) paths starting with '/'## e.g. 'https://cdn.com'cdn: \"\"# the avatar on sidebar, support local or CORS resourcesavatar: \"/assets/img/site/avatar.png\"Remova o CDN, assim utilizaremos imagens da própria aplicação;Ajuste o AVATAR, conforme criamos a imagem;Para testarmos, se a aplicação estiver rodando, pare e reinicie para ela carregar a nova imagem do avatar: bundle exec jekyll sAgora temos nossa imagem de avatar normalmente, mas pegando nos arquivos locais da aplicação.Note que a imagem do post Text and Typography não é mais acessível, justamente por termos retirado a configuração do CDN.Vamos fazer um exemplo de como adicionar a imagem no post?Irei utilizar a própria imagem do avatar, mas seguindo nossa padronização de pastas. Copie ela para: /assets/img/posts/2019-08-09-getting-started/post-cover.png, lembrando que caso ela precise de uma imagem traduzida para o pt-BR também deverá criar outra imagem /assets/img/posts/2019-08-09-getting-started/pt-BR/post-cover.png.Estou utilizando essa nomenclatura pois assim seguimos o padrão de que todo post que tenha imagem de capa terá uma imagem post-cover.png e depois as demais imagens do post para escrevermos o que desejarmos.Vamos ajustar a configuração da imagem no post:---title: Text and Typographylang: endescription: Examples of text, typography, math equations, diagrams, flowcharts, pictures, videos, and more.author: cotesdate: 2019-08-08 11:33:00 +0800categories: [Blogging, Demo]tags: [typography]pin: truemath: truemermaid: truemedia_subpath: '/assets/img/posts/2019-08-09-getting-started'image:  path: /post-cover.png  alt: The Post Cover Image---Note que configuramos o path como nome da imagem mas também temos uma configuração de media_subpath, assim todas imagens utilizadas no post já irão possuir esse prefixo do caminho para utilizarmos as imagens de dentro da pasta de imagens do post.Atente-se para a lang do post, pois para imagens traduzidas de cada idioma teremos o caminho correspondente.Para testarmos vamos novamente reiniciar a aplicação.Pronto, agora temos nossa imagem de capa no post pegando dos nossos arquivos locais.Ok, até aqui temos a aplicação conforme a branch: 5-assets-in-local-folders9 - Ajustando tradução de título e subtítuloVamos permitir também que a seleção de idiomas altere as informações abaixo de nosso avatar.Altere no arquivo _config.yml as configurações de title, tagline e description, seguindo a mesma padronização de idiomas para permitir a tradução das informações:# the main titletitle:  en: Chirpy EN  pt-BR: Chirpy pt-BR# it will display as the subtitletagline:  en: A text-focused Jekyll theme  pt-BR: Um tema Jekyll focado em textoAgora faça a substituição das variáveis de toda a aplicação, pelo replace do VSCode, para utilizar as novas variáveis de idioma:Altere site.title para site.title[site.active_lang]Altere site.tagline para site.tagline[site.active_lang]Altere site.description para site.description[site.active_lang]Ok, até aqui temos a aplicação conforme a branch: 6-title-languages10 - Informações adicionais de configuraçãoVocê deve ter notado que nosso arquivo /_config.yml possui diversas outras configurações que não alteramos.Acredito que dando uma lida no arquivo as informações do Jekyll sejam claras, então basta ir ajustando conforme suas informações pessoais e redes sociais para que seu blog fique completo.Também temos configurações para você poder utilizar nos seus posts, como o autor, encontrada em /_data/authors.yml e acessível pelo tutorial Chirpy - Author Information.Como a ideia deste tutorial é focar na abordagem de multilinguagem do blog, deixo com você a documentação do próprio Chirpy para que você possa aprender mais sobre a ferramenta e implementar seu blog: https://chirpy.cotes.page/. Como você pode ver na documentação do Chirpy, você ainda pode ajustar diversas coisas em seus posts, como imagens, vídeos, áudios, diagramas, etc.Também temos a documentação do Jekyll para você consultar: https://jekyllrb.com/docs/.11 - Criando nosso repositório de deployAplicação implementada, vamos agora colocar para rodar no Github.Crie um repositório para deploy do blog. Esse repositório deverá ser seu nome de usuário para que o github permita hospedar seu blog estático, seguindo o padrão: **.github.io**. No meu caso ficou Clone o repo para sua pasta de trabalho.Voltamos ao nosso arquivo /_config.yml para ajustarmos nosso domínio da aplicação.Adicione seu username na configuração de url:# Fill in the protocol &amp; hostname for your site.# E.g. 'https://username.github.io', note that it does not end with a '/'.url: \"https://digo8875.github.io/\"Agora vamos buildar o blog e fazer o deploy.Na pasta do blog, no terminal, execute os comandos:npm run buildbundle exec jekyll buildAgora temos os arquivos JS e CSS buildados pelo Node e as páginas do blog buildadas pelo Jekyll, tudo na pasta /_site.Copie o conteúdo da pasta /_site para seu repo de deploy e realize o commit para subir os arquivos no Github.Se você for no Github e acompanhar o repositório, verá que automaticamente uma ação do Github Pages será colocada na fila e executada.Após funcionar essa ação do Github, seu blog estará com as informações atualizadas e o deploy estará feito.Conforme podemos observar na imagem, nos retângulo vermelhos houve a execução do Github Pages:Repositório no GitHub com arquivos de deploy do blog e ação do GitHub Pages executadaPara acessarmos nosso blog, basta colocarmos no navegador: **.github.io**, onde o meu é Ok, até aqui temos a aplicação conforme a branch: 7-github-io12 - FinalizaçãoAgora temos uma abordagem para criarmos um blog e começarmos a dividir nossas ideias e ensinamentos.Agradeço o tempo que passamos juntos, espero que tenha gostado da nossa diversão e que assim possa contribuir com seus conhecimentos para outras pessoas.Lembre-se que essa é uma das várias maneiras de implementarmos um blog. Sinta-se livre para realizar modificações e melhorias conforme desejar ao seu blog.Até a próxima!Links  Documentações          Jekyll      Chirpy      Chirpy - 7.2.4      Polyglot      Liquid      Markdown        Tutoriais Consultados e Links Úteis          Tutorial - Plyglot      Tutorial - Jekyll Blog Workflow      Tutorial - Chirpy Polyglot      Tutorial - Jekyll Deploy      Tutorial - Jekyll e Github Pages      Assets - Flags      "
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-10 13:34:00 -0300",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 09:55:00 -0300",
    





    
    "snippet": "Creating a Site RepositoryNosso POST em pt-BR !!!",
    "content": "Creating a Site RepositoryNosso POST em pt-BR !!!"
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 03:10:00 -0300",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global setting for comments is defined by the comments.provider option in the _config.yml file. Once a comment system is selected for this variable, comments will be enabled for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MediaWe refer to images, audio and video as media resources in Chirpy.URL PrefixFrom time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters.      If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name.    cdn: https://cdn.com            To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post:    ---media_subpath: /path/to/media/---      The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.extImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }VideoSocial Media PlatformYou can embed videos from social media platforms with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 00:33:00 -0300",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  }
  
]

